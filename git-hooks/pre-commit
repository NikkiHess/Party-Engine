#!/bin/sh

cd "$(git rev-parse --show-toplevel)" || exit 1

errors=0

# check if the first line of the play function is commented out
# returns 1 if the error occurred
check_play_function() {
    local target_line='std::string soundPath = "resources/audio/" \+ soundName;'
    local audio_player_file="src/audio/AudioPlayer.cpp"  # path to AudioPlayer.cpp

    # Using grep to search for the target line without comment signs in front of it
    # If the line is found, grep returns 0 (success), else it returns 1 (no match)
    if ! grep -qP "^[[:blank:]]*${target_line}" "$audio_player_file"; then
        # If the line with required pattern is not found, the line might be commented out or the file altered
        echo "- AudioPlayer::play should not be commented out. Please correct before committing."
        return 1
    fi
    return 0
}

# check if RECORDING_MODE is set to true
# returns 1 if the error occurred
check_recording_mode() {
    local helper_file="dependencies/Helper.h" # path to Helper.h

    local line=$(grep -n "inline static const bool RECORDING_MODE = true;" "$helper_file" | cut -f1 -d:)
    if [ -n "$line" ]; then
        echo "- RECORDING_MODE should be set to false in dependencies/Helper.h. Please correct before committing."
        return 1
    fi
    return 0
}

# make sure the local debug path update is commented out
# returns 1 if the error occurred
check_osx_debugpath() {
    local file_path="src/GameEngine.cpp" # path to GameEngine.cpp
    local expected_comment='\/\/\s*std::filesystem::current_path\("/Users/lindsaygreig/Desktop/game_engine_nkhess"\);'

    local line=$(grep -nP "$expected_comment" "$file_path" | cut -f1 -d:)
    if [ -z "$line" ]; then
        echo "- The OSX local debug code is uncommented. Please correct before committing."
        return 1
    fi
    return 0
}

# run checks and capture output in variables to delay printing
play_function_check=$(check_play_function 2>&1)
play_function_status=$?

recording_mode_check=$(check_recording_mode 2>&1)
recording_mode_status=$?

osx_debugpath_check=$(check_osx_debugpath 2>&1)
osx_debugpath_status=$?

# update errors count based on check statuses
errors=$((play_function_status + recording_mode_status + osx_debugpath_status))

# if there were any errors, print the general message, then the specific messages.
if [ $errors -ne 0 ]; then
    if [ $errors -eq 1 ]; then
        echo "$errors pre-commit error has occurred:"
    else
        echo "$errors pre-commit errors have occurred:"
    fi
    echo ""
    
    [ $play_function_status -ne 0 ] && echo "$play_function_check"
    [ $recording_mode_status -ne 0 ] && echo "$recording_mode_check"
    [ $osx_debugpath_status -ne 0 ] && echo "$osx_debugpath_check"
    exit 1
fi

exit 0